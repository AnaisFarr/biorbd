// File : biorbd_utils.i
%{
#include "Utils/String.h"
#include "Utils/Scalar.h"
#include "Utils/Vector.h"
#include "Utils/SpatialVector.h"
#include "Utils/Matrix.h"
#include "Utils/Quaternion.h"
#include "Utils/Node.h"
#include "Utils/RotoTrans.h"
#include "Utils/RotoTransNode.h"
#include "Utils/Rotation.h"
#include "Utils/Range.h"
#include "Utils/Timer.h"
#include "Utils/Benchmark.h"
%}

// Instantiate templates
namespace std {
%template(VecBiorbdString) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::String>;
%template(PairBiorbdString) std::pair<biorbd::BIORBD_MATH_NAMESPACE::utils::String, biorbd::BIORBD_MATH_NAMESPACE::utils::String>;

%template(VecBiorbdVector) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Vector>;
%template(MatBiorbdVector) std::vector<std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Vector>>;
%template(VecBiorbdSpatialVector) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::SpatialVector>;
%template(MatBiorbdMatrix) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Matrix>;
%template(VecBiorbdRotoTrans) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::RotoTrans>;
%template(MatBiorbdRotoTrans) std::vector<std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::RotoTrans>>;
%template(VecBiorbdRototation) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Rotation>;
%template(MatBiorbdRototation) std::vector<std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Rotation>>;
%template(VecBiorbdNode) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Vector3d>;
%template(MatBiorbdNode) std::vector<std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Vector3d>>;
%template(VecBiorbdRange) std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Range>;
%template(MatBiorbdRange) std::vector<std::vector<biorbd::BIORBD_MATH_NAMESPACE::utils::Range>>;
}


%extend biorbd::BIORBD_MATH_NAMESPACE::utils::String{
    std::string to_string(){
        return *$self;
    }
}

%extend biorbd::BIORBD_MATH_NAMESPACE::utils::Rotation{
    biorbd::BIORBD_MATH_NAMESPACE::utils::Rotation transpose(){
        return $self->RigidBodyDynamics::Math::Matrix3d::transpose();
    }

    biorbd::BIORBD_MATH_NAMESPACE::utils::Rotation operator*(
                const biorbd::BIORBD_MATH_NAMESPACE::utils::Rotation& other){
        return $self->RigidBodyDynamics::Math::Matrix3d::operator*(other);
    }
}

%extend biorbd::BIORBD_MATH_NAMESPACE::utils::Vector3d{
    biorbd::BIORBD_MATH_NAMESPACE::utils::NODE_TYPE typeOfNode() const{
        return $self->biorbd::BIORBD_MATH_NAMESPACE::utils::Node::typeOfNode();
    }
}

%include "@CMAKE_SOURCE_DIR@/include/Utils/UtilsEnum.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/String.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Path.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Scalar.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Vector.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Matrix.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Quaternion.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Node.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Vector3d.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/SpatialVector.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/RotoTrans.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Rotation.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Range.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/RotoTransNode.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Timer.h"
%include "@CMAKE_SOURCE_DIR@/include/Utils/Benchmark.h"

